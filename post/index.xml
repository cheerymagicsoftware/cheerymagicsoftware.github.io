<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Cheerymagicsoftware official page </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://cheerymagicsoftware.github.io/post/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Mon, 10 Jun 2019 16:54:58 IDT</updated>
    
    <item>
      <title>PAYONEER: ALL-IN-ONE PLATFORM FOR GLOBAL GROWTH</title>
      <link>https://cheerymagicsoftware.github.io/post/powerful-tool-payoneer/</link>
      <pubDate>Mon, 10 Jun 2019 16:54:58 IDT</pubDate>
      
      <guid>https://cheerymagicsoftware.github.io/post/powerful-tool-payoneer/</guid>
      <description>&lt;p&gt;Get paid for work done is naturally. But if your clients from different places in the world. You need an international powerful tool to get and receive money.
Our company decided to use &lt;a target=&#34;_blank&#34; href=&#34;http://tracking.payoneer.com/SH1tZ&#34; rel=&#34;nofollow&#34;&gt;Payoneer&lt;/a&gt;. Why this system is popular and very powerful? Let&amp;rsquo;s show in examples.&lt;/p&gt;

&lt;p&gt;When we finish the project and close contract in Upwork platform, then we get payments directly to prepaid debit card Payoneer.
It easy setting in the account page. Go to Account-&amp;gt;Settings-&amp;gt;Get Paid. Click Add Method button and you&amp;rsquo;ll see next modal window&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/upworks_payment.png&#34; alt=&#34;Set method upwork&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/upwork_payment_set_method.png&#34; alt=&#34;Choose method upwork&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Choose Payoneer and you&amp;rsquo;ll redirect to Payoneer Area. Login or Register and then back to Upwork with the related payment method&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/upworks_payment_finish.png&#34; alt=&#34;finish_set method upwork&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After that, we can get money from our Payoneer Card in the local ATM.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Another interesting tool Global Payment Service. This service you can use as like your own bank account in a local bank for several currencies. Example,
let&amp;rsquo;s start selling on eBay. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;After registering, we must create a seller account. Then you must fill account seller form and get call or text message to your phone to verify.
When you start selling on eBay you have limited 10 items and 500$ per month. &lt;em&gt;Advice&lt;/em&gt;: you must upgrade the rating for good sells. Rating on eBay count for sell and buy items. So you can buy several items and grow up your rating.&lt;/p&gt;

&lt;p&gt;To receive money from eBay your Payoneer account easy with Global Payment Service. Go to Home &amp;gt; My eBay &amp;gt; My Account &amp;gt; Personal Information &amp;gt; Financial Information and add &amp;ldquo;automatic payment method&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/eBay_add_payment_method.png&#34; alt=&#34;ebay_set_auto_method&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To fill this fields go to payoneer accont Account &amp;gt; Global Payment Service&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/payoneer_choose_account.png&#34; alt=&#34;payoneer_set_account_data&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Choose the account and fill now eBay form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/Payoneer_account_page.png&#34; alt=&#34;payoneer_set_account_data&#34; /&gt;&lt;/p&gt;

&lt;p&gt;During few days eBay get and recive back 0.01$ to verify your data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/Payoneer_incoming.png&#34; alt=&#34;payoneer_set_account_data&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Conclusion: &lt;a target=&#34;_blank&#34; href=&#34;http://tracking.payoneer.com/SH1tZ&#34; rel=&#34;nofollow&#34;&gt;Payoneer&lt;/a&gt; is a powerful platform to manage your finance over all of the worlds. &lt;a target=&#34;_blank&#34; href=&#34;http://tracking.payoneer.com/SH1tZ&#34; rel=&#34;nofollow&#34;&gt;Join&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google reCAPTCHA V2 widget for Yii Framework 1.</title>
      <link>https://cheerymagicsoftware.github.io/post/google-recaptcha-v2-widget-for-yii-1/</link>
      <pubDate>Fri, 13 Oct 2017 16:43:48 &#43;0200</pubDate>
      
      <guid>https://cheerymagicsoftware.github.io/post/google-recaptcha-v2-widget-for-yii-1/</guid>
      <description>&lt;p&gt;Recently we needed integrate recaptcha to login and registration forms. Project was on Yii 1 framework.
These forms were show in defferent modal windows. All most realized widgets reCaptcha v2 for Yii1 were for &amp;ldquo;single form&amp;rdquo; mode with tag.
And we decided to fix the situation - create the universal widget.&lt;/p&gt;

&lt;p&gt;In official &lt;a href=&#34;https://developers.google.com/recaptcha/docs/display&#34;&gt;docs&lt;/a&gt; google reCaptcha has 2 method for render widget: onload and explicit.
Standart render &amp;ldquo;onload&amp;rdquo; in tag with class &amp;lsquo;g-recaptcha&amp;rsquo; (1):&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php

    Yii::import(&#39;application.extensions.reCaptcha2.SReCaptcha&#39;);
    $this-&gt;widget(&#39;SReCaptcha&#39;,
      [
            &#39;name&#39; =&gt; &#39;reCaptcha&#39;, 
            &#39;siteKey&#39; =&gt; Yii::app()-&gt;params[&#39;reCaptcha2PublicKey&#39;], 
            &#39;widgetOptions&#39; =&gt; [&#39;class&#39; =&gt; &#39;col-lg-3&#39;],
            &#39;theme&#39; =&gt; SReCaptcha::THEME_DARK,
            &#39;size&#39; =&gt; SReCaptcha::SIZE_COMPACT,
            &#39;jsCallback&#39; =&gt; &#39;console.log(&#34;reCaptcha is ready!&#34;);console.log(response);&#39;,
            &#39;jsExpiredCallback&#39; =&gt; &#39;console.log(&#34;reCaptcha is expired!&#34;);&#39;
      ]
    );&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;Description:
name - Prefer use name like &amp;ldquo;reCaptcha&amp;rdquo; and this is required parameter.
siteKey - Public key reCaptcha and this is required parameter.
widgetOptions - Additional html widget options, such as &lt;code&gt;class&lt;/code&gt;.
theme - Recaptcha themes (dark or light).
size - Recaptcha size (normal or compact).
jsCallback - Will call js code after successfull captcha response. Parameter &amp;ldquo;response&amp;rdquo; is the key (g-recaptcha-response) will be send to verify server.
jsExpiredCallback - Js code if reCaptcha is expired.&lt;/p&gt;

&lt;p&gt;Ok. Code Example if you want use captcha in Active Form with model (2):&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php

    $form-&gt;widget(&#39;application.extensions.reCaptcha2.SReCaptcha&#39;,
        [
            &#39;name&#39; =&gt; &#39;reCaptcha&#39;, //is requred
            &#39;siteKey&#39; =&gt; Yii::app()-&gt;params[&#39;reCaptcha2PublicKey&#39;], //is requred
            &#39;model&#39; =&gt; $model,
            //&#39;attribute&#39; =&gt; &#39;reCaptcha&#39; //if we use model name equal attribute or customize attribute
        ]
    );&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;You may use params like descripted above (1).&lt;/p&gt;

&lt;p&gt;In case render &amp;ldquo;explicit&amp;rdquo; needed add parameter &amp;lsquo;render&amp;rsquo; and see &lt;a href=&#34;https://developers.google.com/recaptcha/docs/display#render_param&#34;&gt;params&lt;/a&gt; for &amp;ldquo;grecaptcha.render parameters&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;
    &lt;code class=&#34;language-html&#34;&gt;
        &lt;form method=&#34;POST&#34; action=&#34;/login&#34;&gt;
            LOGIN FORM:
            Username:&lt;input type=&#34;text&#34; name=&#34;Login[username]&#34;&gt;
            Password:&lt;input type=&#34;password&#34; name=&#34;Login[password]&#34;&gt;
            &lt;div id=&#34;reCaptchaLogin&#34;&gt;&lt;/div&gt;
        &lt;/form&gt;
        
        &lt;form method=&#34;POST&#34; action=&#34;/reg&#34;&gt;
            REGISTRATION FORM:
            Username: &lt;input type=&#34;text&#34; name=&#34;Reg[username]&#34;&gt;
            Password: &lt;input type=&#34;password&#34; name=&#34;Reg[password]&#34;&gt;
            Confirm Password: &lt;input type=&#34;password&#34; name=&#34;Reg[confirm]&#34;&gt;
            &lt;div id=&#34;reCaptchaReg&#34;&gt;&lt;/div&gt;
        &lt;/form&gt;&lt;/code&gt;

&lt;/pre&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;
    $this-&gt;widget(&#39;application.extensions.reCaptcha2.SReCaptcha&#39;,
        [
            &#39;siteKey&#39; =&gt; Yii::app()-&gt;params[&#39;reCaptcha2PublicKey&#39;],
            &#39;render&#39; =&gt; [
                &#39;reCaptchaLogin&#39; =&gt; [
                    &#39;callback&#39; =&gt; &#39;console.log(&#34;#reCaptchaLogin is ready!&#34;);&#39;,
                    &#39;theme&#39; =&gt; &#39;dark&#39;,
                    &#39;expired-callback&#39; =&gt; &#39;console.log(&#34;#reCaptchaLogin is expired!&#34;);&#39;
                ],
                &#39;reCaptchaReg&#39; =&gt; [
                    &#39;size&#39; =&gt; &#39;compact&#39;,
                    &#39;callback&#39; =&gt; &#39;console.log(&#34;#reCaptchaReg is ready!&#34;);console.log(response);&#39;,
                ]
            ],
        ]
    );
    &lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;And don&amp;rsquo;t forget add validator, for example code for your model:&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;
    public $reCaptcha;
   //...
   
   public function rules()
   {
     return [
         // ...
         // secret is required
         [&#39;reCaptcha&#39;, &#39;application.extensions.reCaptcha2.SReCaptchaValidator&#39;, &#39;secret&#39; =&gt; Yii::app()-&gt;params[&#39;reCaptcha2PrivateKey&#39;],&#39;message&#39; =&gt; &#39;The verification code is incorrect.&#39;]
         // ...
     ];
   }&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all. I hope, the widget will be useful.
&lt;a href=&#34;https://github.com/cheerymagicsoftware/Yii1ReCaptcha2&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom url for checkout and cart in Magento 2</title>
      <link>https://cheerymagicsoftware.github.io/post/custom-url-for-checkout-and-cart/</link>
      <pubDate>Wed, 15 Mar 2017 14:49:48 IST</pubDate>
      
      <guid>https://cheerymagicsoftware.github.io/post/custom-url-for-checkout-and-cart/</guid>
      <description>&lt;p&gt;Suppose you need change checkout&amp;rsquo;s url  (&lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout&lt;/span&gt; to &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout&lt;/span&gt;)  and cart (&lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout/cart&lt;/span&gt; to &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout/basket&lt;/span&gt;)  in Magento 2 shop. The first thing that comes to mind use Url Rewrite Module (Admin-&amp;gt;Marketing-&amp;gt;Url Rewrites)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/add-new-url-rewrite-magento-2.png&#34; alt=&#34;Add url rewrite in Magento 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For these two links need set Redirect type = &amp;ldquo;No&amp;rdquo; and redefine new links in your theme (suppose you can do it). During use will be that the collapses in the shipping or payment you will always return to the page &amp;ldquo;&lt;span style=&#34;color:#6d79de;&#34;&gt;checkout/cart&lt;/span&gt;&amp;rdquo; - this is hardcoded in Magento 2:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/search-cart-in-vendor-magento-2.png&#34; alt=&#34;Search cart in vendor Magento 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Also &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout#shipping&lt;/span&gt; after estimate, you redirect to &lt;span style=&#34;color:#6d79de;&#34;&gt;checkout/#payment&lt;/span&gt;. So let&amp;rsquo;s make module, which by url define if &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout&lt;/span&gt; then needed load module &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout&lt;/span&gt; and accordingly &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout/basket&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout/cart&lt;/span&gt;, аnd also redirect &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout&lt;/span&gt; &amp;ndash;&amp;gt; &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout&lt;/span&gt; and &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout/cart&lt;/span&gt; &amp;ndash;&amp;gt;&lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout/basket&lt;/span&gt;. At the same time must work functions such &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout/cart/add&lt;/span&gt;, &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout/cart/delete&lt;/span&gt;, &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout/cart/updatepost&lt;/span&gt;&amp;hellip; and others.&lt;/p&gt;

&lt;p&gt;Create a standard set of files for our module&lt;/p&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/registration.php&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php
    \Magento\Framework\Component\ComponentRegistrar::register(
        \Magento\Framework\Component\ComponentRegistrar::MODULE,
        &#39;CheeryMagic_CustomCheckout&#39;,
        __DIR__
    );&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/composer.json&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-json&#34;&gt;    {
    &#34;name&#34;: &#34;cheerymagic/module-customcheckout&#34;,
        &#34;description&#34;: &#34;&#34;,
        &#34;license&#34;: &#34;&#34;,
        &#34;authors&#34;: [
            {
                &#34;name&#34;: &#34;CustomCheckout&#34;,
                &#34;email&#34;: &#34;cheerymagicsoftware@gmail.com&#34;
            }
        ],
        &#34;minimum-stability&#34;: &#34;dev&#34;,
        &#34;require&#34;: {},
        &#34;autoload&#34;: {
            &#34;psr-4&#34;: {
                &#34;CheeryMagic\\CustomCheckout\\&#34;: &#34;&#34;
            },
            &#34;files&#34;: [
                &#34;registration.php&#34;
            ]
        }
    }&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/etc/module.xml&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-html&#34;&gt;    &amp;lt;?xml version=&#34;1.0&#34; ?&amp;gt;
    &lt;config xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:noNamespaceSchemaLocation=&#34;urn:magento:framework:Module/etc/module.xsd&#34;&gt;
        &amp;lt;module name=&#34;CheeryMagic_CustomCheckout&#34; setup_version=&#34;1.0.0&#34; /&amp;gt;
    &lt;/config&gt;&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/etc/frontend/routes.xml&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-html&#34;&gt;    &amp;lt;?xml version=&#34;1.0&#34; ?&amp;gt;
    &lt;config xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:noNamespaceSchemaLocation=&#34;urn:magento:framework:App/etc/routes.xsd&#34;&gt;
        &lt;router id=&#34;standard&#34;&gt;
            &lt;route frontName=&#34;customcheckout&#34; id=&#34;customcheckout&#34;&gt;
                &lt;module name=&#34;CheeryMagic_CustomCheckout&#34;/&gt;
            &lt;/route&gt;
        &lt;/router&gt;
    &lt;/config&gt;&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;Now we show that we have to use a router class to call &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout&lt;/span&gt; and &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout/basket&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/etc/frontend/di.xml&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-html&#34;&gt;    &amp;lt;?xml version=&#34;1.0&#34; ?&amp;gt;
    &lt;config xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:noNamespaceSchemaLocation=&#34;urn:magento:framework:ObjectManager/etc/config.xsd&#34;&gt;
        &lt;type name=&#34;Magento\Framework\App\RouterList&#34;&gt;
            &lt;arguments&gt;
                &lt;argument name=&#34;routerList&#34; xsi:type=&#34;array&#34;&gt;
                    &lt;item name=&#34;customcheckout&#34; xsi:type=&#34;array&#34;&gt;
                        &lt;item name=&#34;class&#34; xsi:type=&#34;string&#34;&gt;CheeryMagic\CustomCheckout\Controller\Router&lt;/item&gt;
                        &lt;item name=&#34;disable&#34; xsi:type=&#34;boolean&#34;&gt;false&lt;/item&gt;
                        &lt;item name=&#34;sortOrder&#34; xsi:type=&#34;string&#34;&gt;60&lt;/item&gt;
                    &lt;/item&gt;
                &lt;/argument&gt;
            &lt;/arguments&gt;
        &lt;/type&gt;
    &lt;/config&gt;&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;Class router, which will be targeted to load our &lt;span style=&#34;color:#6d79de;&#34;&gt;checkout/index/index&lt;/span&gt; and &lt;span style=&#34;color:#6d79de;&#34;&gt;checkout/cart/index&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/Controller/Router.php&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php

    namespace CheeryMagic\CustomCheckout\Controller;

    class Router implements \Magento\Framework\App\RouterInterface
    {

        /**
         * @var \Magento\Framework\App\ActionFactory
         */

        protected $actionFactory;

        /**
         * @param \Magento\Framework\App\ActionFactory $actionFactory
         */

        public function __construct(
            \Magento\Framework\App\ActionFactory $actionFactory
        )
        {
            $this-&gt;actionFactory = $actionFactory;
        }

        /**
         * @param \Magento\Framework\App\RequestInterface $request
         * @return bool
         */
        public function match(\Magento\Framework\App\RequestInterface $request)
        {

            $uri = \CheeryMagic\CustomCheckout\Plugin\Helper::getArrayPathInfo($request-&gt;getPathInfo());

            $route = [];
            if (
                count($uri) == 2 &amp;&amp;
                ($uri[0] == &#39;checkout&#39; &amp;&amp; $uri[1] == &#39;cart&#39; || $uri[0] == &#39;customcheckout&#39; &amp;&amp; $uri[1] == &#39;basket&#39;)
            ) {
                $route = [
                    &#39;module&#39; =&gt; &#39;checkout&#39;,
                    &#39;controller&#39; =&gt; &#39;cart&#39;,
                    &#39;action&#39; =&gt; &#39;index&#39;
                ];
            }
            if (count($uri) == 1 &amp;&amp; ($uri[0] == &#39;checkout&#39; || $uri[0] == &#39;customcheckout&#39;)) {
                $route = [
                    &#39;module&#39; =&gt; &#39;checkout&#39;,
                    &#39;controller&#39; =&gt; &#39;index&#39;,
                    &#39;action&#39; =&gt; &#39;index&#39;
                ];
            }

            if (!empty($route)) {
                $module = $request-&gt;setModuleName($route[&#39;module&#39;]);
                $module-&gt;setControllerName($route[&#39;controller&#39;])-&gt;setActionName($route[&#39;action&#39;]);
                $request-&gt;setAlias(\Magento\Framework\Url::REWRITE_REQUEST_PATH_ALIAS, $uri);

                return $this-&gt;actionFactory-&gt;create(&#39;Magento\Framework\App\Action\Forward&#39;);
            } else {
                return null;
            }

        }

    }&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;We also use a little helper function which will choose from our $request array to determine this &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout&lt;/span&gt; or &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout/cart&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/Plugin/Helper.php&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php

    namespace CheeryMagic\CustomCheckout\Plugin;

    class Helper
    {

        /**
         * @param $pathInfo
         * @return array
         */

        public static function getArrayPathInfo($pathInfo)
        {
            $array = [];
            if ($pathInfo === &#39;&#39;)
                return $array;
            $segs = explode(&#39;/&#39;, $pathInfo . &#39;/&#39;);
            $n = count($segs);
            for ($i = 0; $i &lt; $n - 1; $i++) {
                $key = $segs[$i];
                if ($key === &#39;&#39;) continue;
                if (!(($pos = strpos($key, &#39;[&#39;)) !== false &amp;&amp; ($m = preg_match_all(&#39;/\[(.*?)\]/&#39;, $key, $matches)) &gt; 0))
                    $array[] = $key;
            }
            return $array;
        }
    }&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;Now the problem to intercept the path &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout&lt;/span&gt; and &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout/cart&lt;/span&gt; on which can throw us Magento 2 and make redirect to Route Class of our module. For this add plugins &amp;lsquo;before&amp;rsquo; on function dispatch() in abstract classes. &lt;span style=&#34;color:#6d79de;&#34;&gt;Magento\Checkout\Controller\Cart&lt;/span&gt; and &lt;span style=&#34;color:#6d79de;&#34;&gt;Magento\Checkout\Controller\Action&lt;/span&gt; .&lt;/p&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/etc/di.xml&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-html&#34;&gt;    &amp;lt;?xml version=&#34;1.0&#34; ?&amp;gt;
    &lt;config xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:noNamespaceSchemaLocation=&#34;urn:magento:framework:ObjectManager/etc/config.xsd&#34;&gt;
        &lt;type name=&#34;Magento\Checkout\Controller\Cart&#34;&gt;
            &lt;plugin disabled=&#34;false&#34; name=&#34;CheeryMagic_CustomCheckout_Plugin_Magento_Checkout_Controller_Cart&#34; sortOrder=&#34;10&#34; type=&#34;CheeryMagic\CustomCheckout\Plugin\Magento\Checkout\Controller\Cart&#34;/&gt;
        &lt;/type&gt;
        &lt;type name=&#34;Magento\Checkout\Controller\Action&#34;&gt;
            &lt;plugin disabled=&#34;false&#34; name=&#34;CheeryMagic_CustomCheckout_Plugin_Magento_Checkout_Controller_Action&#34; sortOrder=&#34;10&#34; type=&#34;CheeryMagic\CustomCheckout\Plugin\Magento\Checkout\Controller\Action&#34;/&gt;
        &lt;/type&gt;
    &lt;/config&gt;&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/Plugin/Magento/Checkout/Controller/Cart.php&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php

    namespace CheeryMagic\CustomCheckout\Plugin\Magento\Checkout\Controller;

    class Cart
    {

        /**
         * @param \Magento\Checkout\Controller\Cart $subject
         * @param \Magento\Framework\App\RequestInterface $request
         */

        public function beforeDispatch(
            \Magento\Checkout\Controller\Cart $subject,
            \Magento\Framework\App\RequestInterface $request
        ) {

            $uri = \CheeryMagic\CustomCheckout\Plugin\Helper::getArrayPathInfo($request-&gt;getPathInfo());
            $parseUri = parse_url($request-&gt;getRequestUri());
            $query = isset($parseUri[&#39;query&#39;]) ?  &#39;?&#39; . $parseUri[&#39;query&#39;] : &#39;&#39;;

            if(count($uri) == 2 &amp;&amp; $uri[0] == &#39;checkout&#39; &amp;&amp; $uri[1] == &#39;cart&#39;)
            {
                $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
                $responseFactory = $objectManager-&gt;get(&#39;\Magento\Framework\App\ResponseFactory&#39;);
                $url = $objectManager-&gt;get(&#39;Magento\Framework\UrlInterface&#39;);
                $responseFactory-&gt;create()-&gt;setRedirect(
                    $url-&gt;getUrl(&#39;customcheckout/basket&#39; . $query
                    ))-&gt;sendResponse();
                exit();

           }

        }
    }&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;/app/code/CheeryMagic/CustomCheckout/Plugin/Magento/Checkout/Controller/Action.php&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php

    namespace CheeryMagic\CustomCheckout\Plugin\Magento\Checkout\Controller;

    class Action
    {
        /**
         * @param \Magento\Checkout\Controller\Action $subject
         * @param \Magento\Framework\App\RequestInterface $request
         */

        public function beforeDispatch(
            \Magento\Checkout\Controller\Action $subject,
            \Magento\Framework\App\RequestInterface $request
        )
        {
            $uri = \CheeryMagic\CustomCheckout\Plugin\Helper::getArrayPathInfo($request-&gt;getPathInfo());
            $parseUri = parse_url($request-&gt;getRequestUri());
            $query = isset($parseUri[&#39;query&#39;]) ? &#39;?&#39; . $parseUri[&#39;query&#39;] : &#39;&#39;;

            if (count($uri) == 1 &amp;&amp; $uri[0] == &#39;checkout&#39;) {
                $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
                $responseFactory = $objectManager-&gt;get(&#39;\Magento\Framework\App\ResponseFactory&#39;);
                $url = $objectManager-&gt;get(&#39;Magento\Framework\UrlInterface&#39;);
                $responseFactory-&gt;create()-&gt;setRedirect(
                    $url-&gt;getUrl(&#39;customcheckout&#39; . $query
                    ))-&gt;sendResponse();
                exit();
            }

        }
    }&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;Run in consloe php bin/magento setup:upgrade.&lt;/p&gt;

&lt;p&gt;Now you need override links in your Magento 2 Theme from &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout&lt;/span&gt; to &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout&lt;/span&gt; and &lt;span style=&#34;color:#6d79de;&#34;&gt;/checkout/cart&lt;/span&gt; to &lt;span style=&#34;color:#6d79de;&#34;&gt;/customcheckout/basket&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/custom-url-cart-magento-2.png&#34; alt=&#34;Custom Url Cart in Magento 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/custom-url-checkout-magento-2.png&#34; alt=&#34;Custom Url Checkout in Magento 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This module isn&amp;rsquo;t a universal solution, and is given as a way to solve the problem or how to work with the routers and plugins in Magento 2. It is also possible that the module may conflict with your installed modules. This module can be &lt;a target=&#34;_blank&#34; class=&#34;magento2-link&#34; href=&#34;https://github.com/cheerymagicsoftware/CustomCheckout&#34;&gt;downloaded &lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento 2 Repositories and Factories</title>
      <link>https://cheerymagicsoftware.github.io/post/mage-2-repositories-and-facktories/</link>
      <pubDate>Fri, 03 Mar 2017 14:52:12 IST</pubDate>
      
      <guid>https://cheerymagicsoftware.github.io/post/mage-2-repositories-and-facktories/</guid>
      <description>&lt;p&gt;As a continuation of the previous &lt;a href=&#34;https://cheerymagicsoftware.github.io/post/mage-2-eav/&#34;&gt;post&lt;/a&gt;, let&amp;rsquo;s talk about repositories and factories.  Many entities in Magento 2 such as the product, category customer, address, quote, order, and others  for &amp;ldquo;CRUD&amp;rdquo; operation, better use of the repository and factory. If the version of Magento 2.1 to be able to work directly with the methods AbstractModel load, save, delete:&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php
    $address_id = 5;
    $customer_id = 5;
    $objectManager = \Magento\Framework\App\ObjectManager::getInstance;
    $address = $objectManager-&gt;create(&#39;\Magento\Customer\Model\Address&#39;);// Bad practice! Load classes over constuctor! It&#39;s only for example.

    $address-&gt;load($address_id);

    $address-&gt;setCustomerId($customer_id)
        -&gt;setCountryId(&#39;US&#39;)
        -&gt;setFirstname($this-&gt;getRequest()-&gt;getPostValue(&#39;firstname&#39;))
        -&gt;setLastname($this-&gt;getRequest()-&gt;getPostValue(&#39;lastname&#39;))
        -&gt;setTelephone($this-&gt;getRequest()-&gt;getPostValue(&#39;telephone&#39;));
    //You can&#39;t get/set custom attributes for EAV, because AbstractModel Class don&#39;t have repo.

    $address-&gt;save();&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;That they are now is deprecated, so that if you use these methods, the further upgrade version of Magento at your own risk:&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:#6d79de;&#34;&gt;&lt;a style=&#34;color:#6d79de;&#34; href=&#34;http://devdocs.magento.com/guides/v2.1/extension-dev-guide/persistent-entities.html#models&#34;&gt;&lt;a href=&#34;http://devdocs.magento.com/guides/v2.1/extension-dev-guide/persistent-entities.html#models&#34;&gt;http://devdocs.magento.com/guides/v2.1/extension-dev-guide/persistent-entities.html#models&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php
    $address_id = 5;
    $customer_id = 5;
    $objectManager = \Magento\Framework\App\ObjectManager::getInstance;
    $addressRepo = $objectManager-&gt;create(&#39;\Magento\Customer\Api\AddressRepositoryInterface&#39;);// Bad practice! Load classes over constuctor! It&#39;s only for example.

    $address = $addressRepo-&gt;getById($address_id);
    $address-&gt;setCustomerId($customer_id)
        -&gt;setCountryId(&#39;US&#39;)
        -&gt;setFirstname($this-&gt;getRequest()-&gt;getPostValue(&#39;firstname&#39;))
        -&gt;setLastname($this-&gt;getRequest()-&gt;getPostValue(&#39;lastname&#39;))
        -&gt;setTelephone($this-&gt;getRequest()-&gt;getPostValue(&#39;telephone&#39;));
    $address-&gt;setCustomAttribute(&#39;delivery_instructions&#39;, &#39;My custom Delivery Intruction&#39;); //You can get/set custom attributes.
    $addressRepo-&gt;save($address);&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;And if you&amp;rsquo;re going to add a new address through the repository, then you need create a new instance through the factory:&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php
    //...
    $address = $objectManager-&gt;create(&#39;\Magento\Customer\Api\Data\AddressInterfaceFactory&#39;);
    $address-&gt;setCustomerId($customer_id)
        -&gt;setCountryId(&#39;US&#39;)
        -&gt;setFirstname($this-&gt;getRequest()-&gt;getPostValue(&#39;firstname&#39;))
        -&gt;setLastname($this-&gt;getRequest()-&gt;getPostValue(&#39;lastname&#39;))
        -&gt;setTelephone($this-&gt;getRequest()-&gt;getPostValue(&#39;telephone&#39;));
    //Add needs data for new address entity
    //...
    $address-&gt;setCustomAttribute(&#39;delivery_instructions&#39;, &#39;My custom Delivery Intruction&#39;); //of course custom attribute.
    $addressRepo-&gt;save($address);&lt;/code&gt;

&lt;/pre&gt;

&lt;p&gt;The repository has methods to remove at id and other methods. Implementation of methods repository&amp;rsquo;s interfaces are typically located in the resource model entities. For example, the implementation of &lt;span style=&#34;color:#6d79de;&#34;&gt;\Magento\Customer\Api\AddressRepositoryInterface&lt;/span&gt; is in  &lt;span style=&#34;color:#6d79de;&#34;&gt;Magento\Customer\Model\ResourceModel\AddressRepository&lt;/span&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EAV (Entity-Attribute-Value) entity attributes in Magento 2.</title>
      <link>https://cheerymagicsoftware.github.io/post/mage-2-eav/</link>
      <pubDate>Tue, 28 Feb 2017 14:20:23 IST</pubDate>
      
      <guid>https://cheerymagicsoftware.github.io/post/mage-2-eav/</guid>
      <description>&lt;p&gt;In conventional systems, we&amp;rsquo;ve learned that to add new attributes in entity we follow the classical route. In the table of our entity, we just add the field with value of our new attribute, describe it in the model and use.&lt;/p&gt;

&lt;p&gt;If  we&amp;rsquo;ll go the classic way in Magento and add fields to the tables of entities, then we have a lot of work - this is use in search, display in the frontend, display in the admin backend (grids and edit mode) and so on. Accordingly, the possible bugs in the work.&lt;/p&gt;

&lt;p&gt;The Magento 2  is designed so flexibly that the developer needs to add new attributes to the entities programmatically. But, for example, if the Product and Category entities have visual add / edit mode in the admin area, then such entity as the Customer, Customer Address &amp;hellip; that can be done programmatically. Actually, let&amp;rsquo;s add to the Customer Address  &amp;ldquo;Delivery Instruction&amp;rdquo; attribute.&lt;/p&gt;

&lt;p&gt;Create a file structure of the module:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/structure.png&#34; alt=&#34;project structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;registration.php&lt;/p&gt;

&lt;pre&gt;

    &lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php
         \Magento\Framework\Component\ComponentRegistrar::register(
        \Magento\Framework\Component\ComponentRegistrar::MODULE,
        &#39;CheeryMagic_CustomerAddress&#39;,
        __DIR__
    );&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;composer.json&lt;/p&gt;

&lt;pre&gt;

&lt;code class=&#34;language-json&#34;&gt;    {
        &#34;name&#34;: &#34;cheerymagic/module-customeraddress&#34;,
        &#34;description&#34;: &#34;Add attribute to Customer Address Entity&#34;,
        &#34;license&#34;: &#34;&#34;,
        &#34;authors&#34;: [
            {
                &#34;name&#34;: &#34;CustomerAddressAttribute&#34;,
                &#34;email&#34;: &#34;&#34;
            }
        ],
        &#34;minimum-stability&#34;: &#34;dev&#34;,
        &#34;require&#34;: {},
        &#34;autoload&#34;: {
            &#34;psr-4&#34;: {
                &#34;CheeryMagic\\CustomerAddress\\&#34;: &#34;&#34;
            },
            &#34;files&#34;: [
                &#34;registration.php&#34;
            ]
        }
    }&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;module.xml&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-html&#34;&gt;    &amp;lt;?xml version=&#34;1.0&#34; ?&amp;gt;
    &lt;config xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:noNamespaceSchemaLocation=&#34;urn:magento:framework:Module/etc/module.xsd&#34;&gt;
        &amp;lt;module name=&#34;CheeryMagic_CustomerAddress&#34; setup_version=&#34;1.0.0&#34;/&amp;gt;
    &lt;/config&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;extension_attributes.xml&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-html&#34;&gt;    &amp;lt;?xml version=&#34;1.0&#34; ?&amp;gt;
    &amp;lt;config xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:noNamespaceSchemaLocation=&#34;urn:magento:framework:Api/etc/extension_attributes.xsd&#34;&amp;gt;
        &amp;lt;extension_attributes for=&#34;Magento\Customer\Api\Data\AddressInterface&#34;&amp;gt;
           &amp;lt;attribute code=&#34;delivery_instructions&#34; type=&#34;string&#34;/&amp;gt;
        &amp;lt;/extension_attributes&amp;gt;
    &amp;lt;/config&amp;gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;InstallData.php&lt;/p&gt;

&lt;pre&gt;

&lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php

    namespace CheeryMagic\CustomerAddress\Setup;

    use Magento\Framework\Setup\InstallDataInterface;
    use Magento\Framework\Setup\ModuleContextInterface;
    use Magento\Framework\Setup\ModuleDataSetupInterface;
    use Magento\Customer\Setup\CustomerSetupFactory;

    class InstallData implements InstallDataInterface
    {

        private $customerSetupFactory;

        /**
         * Constructor
         *
         * @param \Magento\Customer\Setup\CustomerSetupFactory $customerSetupFactory
         */
        public function __construct(
            CustomerSetupFactory $customerSetupFactory
        ) {
            $this-&gt;customerSetupFactory = $customerSetupFactory;
        }

        /**
         * {@inheritdoc}
         */
        public function install(
            ModuleDataSetupInterface $setup,
            ModuleContextInterface $context
        ) {
            $customerSetup = $this-&gt;customerSetupFactory-&gt;create([&#39;setup&#39; =&gt; $setup]);

            $customerSetup-&gt;addAttribute(&#39;customer_address&#39;, &#39;delivery_instructions&#39;, [
                &#39;label&#39; =&gt; &#39;Delivery Instructions&#39;,
                &#39;input&#39; =&gt; &#39;text&#39;,
                &#39;type&#39; =&gt; &#39;varchar&#39;,
                &#39;source&#39; =&gt; &#39;&#39;,
                &#39;required&#39; =&gt; true,
                &#39;position&#39; =&gt; 400,
                &#39;visible&#39; =&gt; true,
                &#39;system&#39; =&gt; false,
                &#39;is_used_in_grid&#39; =&gt; false,
                &#39;is_visible_in_grid&#39; =&gt; false,
                &#39;is_filterable_in_grid&#39; =&gt; false,
                &#39;is_searchable_in_grid&#39; =&gt; false,
                &#39;backend&#39; =&gt; &#39;&#39;
            ]);


            $attribute = $customerSetup-&gt;getEavConfig()-&gt;getAttribute(&#39;customer_address&#39;, &#39;delivery_instructions&#39;)
                -&gt;addData([&#39;used_in_forms&#39; =&gt; [
                    &#39;adminhtml_customer_address&#39;,
                    &#39;customer_address_edit&#39;,
                    &#39;customer_register_address&#39;
                ]]);
            $attribute-&gt;save();
        }
    }&lt;/code&gt;
    &lt;/pre&gt;

&lt;p&gt;UpgradeData.php&lt;/p&gt;

&lt;pre&gt;

&lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php

    namespace CheeryMagic\CustomerAddress\Setup;

    use Magento\Framework\Setup\UpgradeDataInterface;
    use Magento\Framework\Setup\ModuleContextInterface;
    use Magento\Framework\Setup\ModuleDataSetupInterface;
    use Magento\Customer\Setup\CustomerSetupFactory;

    class UpgradeData implements UpgradeDataInterface
    {

        private $customerSetupFactory;

        /**
         * Constructor
         *
         * @param \Magento\Customer\Setup\CustomerSetupFactory $customerSetupFactory
         */
        public function __construct(
            CustomerSetupFactory $customerSetupFactory
        ) {
            $this-&gt;customerSetupFactory = $customerSetupFactory;
        }

        /**
         * {@inheritdoc}
         */
        public function upgrade(
            ModuleDataSetupInterface $setup,
            ModuleContextInterface $context
        )
        {
            $customerSetup = $this-&gt;customerSetupFactory-&gt;create([&#39;setup&#39; =&gt; $setup]);

            $customerSetup-&gt;addAttribute(&#39;customer_address&#39;,                &#39;delivery_instructions&#39;, [
                &#39;label&#39; =&gt; &#39;Delivery Instructions&#39;,
                &#39;input&#39; =&gt; &#39;text&#39;,
                &#39;type&#39; =&gt; &#39;varchar&#39;,
                &#39;source&#39; =&gt; &#39;&#39;,
                &#39;required&#39; =&gt; true,
                &#39;position&#39; =&gt; 400,
                &#39;visible&#39; =&gt; true,
                &#39;system&#39; =&gt; false,
                &#39;is_used_in_grid&#39; =&gt; false,
                &#39;is_visible_in_grid&#39; =&gt; false,
                &#39;is_filterable_in_grid&#39; =&gt; false,
                &#39;is_searchable_in_grid&#39; =&gt; false,
                &#39;backend&#39; =&gt; &#39;&#39;
            ]);


            $attribute = $customerSetup-&gt;getEavConfig()-&gt;getAttribute(&#39;customer_address&#39;, &#39;delivery_instructions&#39;)
                -&gt;addData([&#39;used_in_forms&#39; =&gt; [
                    &#39;adminhtml_customer_address&#39;,
                    &#39;customer_address_edit&#39;,
                    &#39;customer_register_address&#39;
                ]]);
            $attribute-&gt;save();
        }
    }&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Upgrade our module.xml to 1.0.1&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-html&#34;&gt;    &amp;lt;?xml version=&#34;1.0&#34; ?&amp;gt;
    &lt;config xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:noNamespaceSchemaLocation=&#34;urn:magento:framework:Module/etc/module.xsd&#34;&gt;
        &amp;lt;module name=&#34;CheeryMagic_CustomerAddress&#34; setup_version=&#34;1.0.1&#34;/&amp;gt;
    &lt;/config&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Run command in console:
php bin/magento setup:upgrade&lt;/p&gt;

&lt;p&gt;Go to Admin-&amp;gt;Customers-&amp;gt;All Customers-&amp;gt;edit and see next:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cheerymagicsoftware.github.io/images/admin_view.png&#34; alt=&#34;admin view&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve created new custom field &amp;ldquo;Delivery Instruction&amp;rdquo;. In fronted you may work with it programmatically.&lt;/p&gt;

&lt;pre&gt;

&lt;code class=&#34;language-php&#34;&gt;    &amp;lt;?php
    $this-&gt;_address = $this-&gt;_addressRepository-&gt;getById($addressId);
    $block-&gt;getAddress()-&gt;getCustomAttribute(&#39;delivery_instructions&#39;);
    $block-&gt;getAddress()-&gt;setCustomAttribute(&#39;delivery_instructions&#39;, &#39;My custom Delivery Intruction&#39;);&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;For more information on EAV and extension attributes are available on the official page:
&lt;a class=&#34;magento2-link&#34; href=&#34;http://devdocs.magento.com/guides/v2.0/extension-dev-guide/attributes.html&#34;&gt;
    &lt;a href=&#34;http://devdocs.magento.com/guides/v2.0/extension-dev-guide/attributes.html&#34;&gt;http://devdocs.magento.com/guides/v2.0/extension-dev-guide/attributes.html&lt;/a&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
